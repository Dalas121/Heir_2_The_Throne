#textdomain wesnoth-h2tt


# newline
#define BR

#enddef

#define ACHIEVE ID
    [set_achievement]
        content_for=heir_2_the_throne
        id=h2tt_{ID}
    [/set_achievement]
#enddef

#define DO_AT_COORDS FLT WML
    {STORE_UNIT_VAR {FLT} x coordX}
    {STORE_UNIT_VAR {FLT} y coordY}
    {WML}
    {CLEAR_VARIABLE coordX,coordY}
#enddef

# "C" stands for "conditional"
#define GENERIC_UNITC SIDE TYPE X Y WML
    {VARIABLE generic_unitc {TYPE}}
    [if] {VARIABLE_CONDITIONAL generic_unitc not_equals "none"}
        {THEN(  {GENERIC_UNIT {SIDE} {TYPE} {X} {Y}} {WML}  )}
    [/if]
    {CLEAR_VARIABLE generic_unitc}
#enddef
#define NOTRAIT_UNITC SIDE TYPE X Y WML
    {VARIABLE notrait_unitc {TYPE}}
    [if] {VARIABLE_CONDITIONAL notrait_unitc not_equals "none"}
        {THEN({NOTRAIT_UNIT {SIDE} {TYPE} {X} {Y}} {WML})}
    [/if]
    {CLEAR_VARIABLE notrait_unitc}
#enddef
#define NAMED_UNITC SIDE TYPE X Y ID NAME WML
    {VARIABLE named_unitc {TYPE}}
    [if] {VARIABLE_CONDITIONAL named_unitc not_equals "none"}
        {THEN( {NAMED_UNIT {SIDE} {TYPE} {X} {Y} {ID} {NAME} ()} {WML} )}
    [/if]
    {CLEAR_VARIABLE named_unitc}
#enddef

#define FIRE_EVENT NAME
    #
    [fire_event]
        name={NAME}
    [/fire_event]
#enddef

#define FIRE_EVENT_UNIT NAME FLT
    #
    [fire_event]
        name={NAME}
        [primary_unit]
            {FLT}
        [/primary_unit]
    [/fire_event]
#enddef

#define PLACE_HALO IMG X Y
    [item]
        x,y={X},{Y}
        halo={IMG}
    [/item]
#enddef

#define VALUE WML
    #
    [value]
        {WML}
    [/value]
#enddef

#define ANIMATE
    [+unit]
        animate=yes
    [/unit]
#enddef

#define LEADER
    [+unit]
        canrecruit=yes
    [/unit]
#enddef

#define SOUND FILE
    #
    [sound]
        name={FILE}
    [/sound]
#enddef

#define DELAY TIME
    [delay]
        time={TIME}
    [/delay]
#enddef

#define REVEAL LOCS
#arg MULTITURN
no#endarg
    [remove_shroud]
        side=1
        {LOCS}
    [/remove_shroud]
    [lift_fog]
        [filter_side]
            side=1
        [/filter_side]
        {LOCS}
        multiturn={MULTITURN}
    [/lift_fog]
#enddef

#define SCREEN_FADER RGB ALPHA DURATION
    [screen_fade]
        red,green,blue={RGB}
        alpha={ALPHA}
        duration={DURATION}
    [/screen_fade]
#enddef

#define REDRAW
    [redraw]
        clear_shroud=yes
    [/redraw]
#enddef

#define MODIFY_TERRAIN_DELAY MS TERRAIN X Y
    {DELAY {MS}}
    {MODIFY_TERRAIN {TERRAIN} {X} {Y}}
    {REDRAW}
#enddef

#define REMOVE_OBJECT OBJECT_ID FILTER_WML
    #
    [remove_object]
        object_id={OBJECT_ID}
        {FILTER_WML}
    [/remove_object]
#enddef
#define GIVE_OBJECT_TO FLT WML
    #
    [modify_unit]
        {FILTER {FLT}}
        [object]
            {WML}
        [/object]
    [/modify_unit]
    #
#enddef
#define EFFECT APPLY_TO WML
    #
    [effect]
        apply_to={APPLY_TO}
        {WML}
    [/effect]
    #
#enddef

# primitive macros for fading music
#define FADE_MUSIC_IN DURATION
    #
    {VARIABLE fade_duration_remaining {DURATION}}
    [while] {VARIABLE_CONDITIONAL fade_duration_remaining greater_than 0}
        [do]
            {VARIABLE_OP fade_duration_remaining sub 5}
            {VARIABLE volume 100}
            {VARIABLE_OP volume multiply $fade_duration_remaining}
            {VARIABLE_OP volume divide {DURATION}}
            {VARIABLE volume "$(100-$volume)"}
            [volume]
                music=$volume
            [/volume]
            {DELAY 5}
        [/do]
    [/while]
    {CLEAR_VARIABLE fade_duration_remaining,volume}
    [volume]
        music=100 # just in case
    [/volume]
    #
#enddef
#define FADE_MUSIC_OUT DURATION
    #
    {VARIABLE fade_duration_remaining {DURATION}}
    [while] {VARIABLE_CONDITIONAL fade_duration_remaining greater_than 0}
        [do]
            {VARIABLE_OP fade_duration_remaining sub 5}
            {VARIABLE volume 100}
            {VARIABLE_OP volume multiply $fade_duration_remaining}
            {VARIABLE_OP volume divide {DURATION}}
            [volume]
                music=$volume
            [/volume]
            {DELAY 5}
        [/do]
    [/while]
    {CLEAR_VARIABLE fade_duration_remaining,volume}
    [volume]
        music=0 # just in case
    [/volume]
    #
#enddef

#define VARIABLES_SPLIT NAME KEY SEPARATOR LIST
    #
    [set_variables]
        name={NAME}
        [split]
            key={KEY}
            separator={SEPARATOR}
            list={LIST}
        [/split]
    [/set_variables]
    #
#enddef



#define KILL FILTER
#arg ANIMATE
no#endarg
#arg FIRE_EVENT
no#endarg
    [kill]
        {FILTER}
        animate={ANIMATE}
        fire_event={FIRE_EVENT}
    [/kill]
#enddef

#define KILL_COUNT COUNT FLT
#arg ANIMATE
no#endarg
#arg FIRE_EVENT
no#endarg
    [store_unit]
        {FILTER {FLT}}
        kill,variable=no,KILL_COUNT_stored_units
    [/store_unit]
    {VARIABLE KILL_COUNT_i 0}
    [foreach]
        array,variable=KILL_COUNT_stored_units,KILL_COUNT_unit
        [do]
            [if] {VARIABLE_CONDITIONAL i less_than {COUNT}} {THEN(
                {VARIABLE_OP i add 1}
                [kill]
                    id=$KILL_COUNT_unit.id
                    animate={ANIMATE}
                    fire_event={FIRE_EVENT}
                [/kill]
            )} [/if]
        [/do]
    [/foreach]
    {CLEAR_VARIABLE KILL_COUNT_stored_units,KILL_COUNT_i}
#enddef





# how many levels of units are in our army? (plus gold/20)
#define CALCULATE_ARMY_STRENGTH SIDE
    {VARIABLE army_strength 0}
    
    [store_unit]
        [filter]
            {NOT x,y=recall,recall}
            side={SIDE} # leave {SIDE} on its own line, in case we have multiple sides (e.g. 2,3,4)
            level=3-99
        [/filter]
        kill,variable,mode=no,army,always_clear
    [/store_unit]
    {VARIABLE army_count $army.length}
    {VARIABLE_OP army_count multiply 3}
    {VARIABLE_OP army_strength add $army_count}
    
    [store_unit]
        [filter]
            {NOT x,y=recall,recall}
            side={SIDE}
            level=2
        [/filter]
        kill,variable,mode=no,army,always_clear
    [/store_unit]
    {VARIABLE army_count $army.length}
    {VARIABLE_OP army_count multiply 2}
    {VARIABLE_OP army_strength add $army_count}
    
    [store_unit]
        [filter]
            {NOT x,y=recall,recall}
            side={SIDE}
            level=1
        [/filter]
        kill,variable,mode=no,army,always_clear
    [/store_unit]
    {VARIABLE army_count $army.length}
    {VARIABLE_OP army_count multiply 1}
    {VARIABLE_OP army_strength add $army_count}
    
    [store_unit]
        [filter]
            {NOT x,y=recall,recall}
            side={SIDE}
            level=0
        [/filter]
        kill,variable,mode=no,army,always_clear
    [/store_unit]
    {VARIABLE army_count $army.length}
    {VARIABLE_OP army_count multiply 0.5}
    {VARIABLE_OP army_strength add $army_count}
    
    [store_gold]
        side={SIDE} # if the user provides multiple sides, only the first side's gold is counted
        variable=gold
    [/store_gold]
    [if] {VARIABLE_CONDITIONAL gold greater_than 0} {THEN(
        {VARIABLE_OP gold divide 20} # count 20 gold as roughly 1 unit-level of army strength
        {VARIABLE_OP army_strength add $gold}
    )} [/if]
    
    {CLEAR_VARIABLE army,army_count,gold} # not army_strength, that's our return value 
#enddef









#define IF_FOUND
    [if]
        [variable]
            name=found_unit.length
            greater_than=0
        [/variable]
#enddef

#define IF_UNFOUND
    [if]
        [not]
            [variable]
                name=found_unit.length
                greater_than=0
            [/variable]
        [/not]
#enddef

# copied (with modifications) from https://wiki.wesnoth.org/WML_Utilities
#define FIND_NEARBY FILTER X Y LIMIT
    # Does a search for a nearby unit that matches the given filter.
    # Basically just looks for such a unit with increasing radius until it finds at least one
    [clear_variable]
        name=found_unit
    [/clear_variable]
    [set_variable]
        name=search_radius
        value=0
    [/set_variable]
    [while]
        [not]
            [variable]
                name=found_unit.length
                greater_than=0
            [/variable]
        [/not]
        [and]
            [variable]
                name=search_radius
                less_than_equal_to={LIMIT}
            [/variable]
        [/and]
        [do]
#             {DEBUG "Searching depth $search_radius around ({X}, {Y})..."}
            [store_unit]
                variable=found_unit
                [filter]
                    {FILTER}
                    [filter_location]
                        x,y={X},{Y}
                        radius=$search_radius
                    [/filter_location]
                [/filter]
            [/store_unit]
#             {DEBUG "...found $found_unit.length units."}
            [set_variable]
                name=search_radius
                add=1
            [/set_variable]
        [/do]
    [/while]
#enddef

#define SPAWN_IF_UNFOUND SIDE TYPE X Y
    [set_variable]
        name=randx
        rand={X}
    [/set_variable]
    [set_variable]
        name=randy
        rand={Y}
    [/set_variable]

    {IF_UNFOUND}
        [then]
            {NAMED_UNIT {SIDE} ({TYPE}) $randx $randy spawned () ()} {ANIMATE}
            [store_unit]
                variable=found_unit
                [filter]
                    id=spawned
                [/filter]
            [/store_unit]
        [/then]
    {ENDIF}
    
    {CLEAR_VARIABLE randx}
    {CLEAR_VARIABLE randy}
#enddef

#define CLEANUP_SEARCH
    # Clears variables involved in searching (the FIND_NEARBY macro). Put this
    # in your name=victory,defeat tag to clean up if you use FIND_NEARBY within
    # a scenario.
    [clear_variable]
        name=found_unit, search_radius
    [/clear_variable]
#enddef

#define IMMOBILE
    [+unit]
        max_moves=0
    [/unit]
#enddef

#define MOVES MAX_MOVES
    [+unit]
        max_moves={MAX_MOVES}
    [/unit]
#enddef

#define PASSABLE
    [+unit]
        passable=yes
    [/unit]
#enddef

#define HITPOINTS HP
    [+unit]
        hitpoints={HP}
    [/unit]
#enddef

#define EXPERIENCE XP
    [+unit]
        experience={XP}
    [/unit]
#enddef

#define STATUS WML
    [+unit]
        [status]
            {WML}
        [/status]
    [/unit]
#enddef

#define GENDER GND
    [+unit]
        gender={GND}
    [/unit]
#enddef

#define NAME UNITNAME
    [+unit]
        name={UNITNAME}
    [/unit]
#enddef

#define ROLE ROLENAME
    [+unit]
        role={ROLENAME}
    [/unit]
#enddef

#define MODIFICATIONS WML
    #
    [modifications]
        {WML}
    [/modifications]
#enddef

#define ADD_MODIFICATION WML
    [+unit]
        [modifications]
            {WML}
        [/modifications]
    [/unit]
#enddef

#define MOVE_STORED_UNIT VAR MOVEX MOVEY
    [set_variable]
        name={VAR}.x
        add={MOVEX}
    [/set_variable]
    [set_variable]
        name={VAR}.y
        add={MOVEY}
    [/set_variable]
#enddef





#define GOLD_PICKUP X Y IMAGE AMOUNT LABEL KONRAD_MESSAGE
    {PLACE_IMAGE {IMAGE} {X} {Y}}
    {SET_LABEL {X} {Y} {LABEL}}
    [event]
        name=moveto {FILTER side,x,y=1,{X},{Y}}
        
        {VARIABLE message {KONRAD_MESSAGE}}
        [if] {VARIABLE_CONDITIONAL message.length greater_than 0} {THEN(
            [message]
                speaker=Konrad
                message=$message
            [/message]
        )} [/if]
        {CLEAR_VARIABLE message}
        
        {SOUND gold.ogg}
        [gold]
            side,amount=1,{AMOUNT}
        [/gold]
        {REMOVE_IMAGE $unit.x $unit.y}
        {REMOVE_LABEL {X} {Y}}
    [/event]
#enddef




#define MOVE_UNDER_KONRAD MOVE_COMMANDS
    # store Konrad
    [store_unit]
        {FILTER id=Konrad}
        kill,variable=yes,stored_konrad
    [/store_unit]
    
    # create illusory Konrad
    [if] {VARIABLE_CONDITIONAL stored_konrad.facing contains w}[then]
        [item]
            name,halo=konrad_top_layer,$stored_konrad.image~FL()
            x,y=$stored_konrad.x,$stored_konrad.y
        [/item]
    [/then][else]
        [item]
            name,halo=konrad_top_layer,$stored_konrad.image
            x,y=$stored_konrad.x,$stored_konrad.y
        [/item]
    [/else] [/if]
    
    # run arbitrary WML
    {MOVE_COMMANDS}
    
    # store any unit still who's in Konrad's hex
    [store_unit]
        {FILTER x,y=$stored_konrad.x,$stored_konrad.y}
        kill,variable=yes,stored_move_under_unit
    [/store_unit]
    
    # restore Konrad
    [remove_item]
        image=konrad_top_layer
    [/remove_item]
    [unstore_unit]
        variable=stored_konrad
    [/unstore_unit]
    {CLEAR_VARIABLE stored_konrad,to_recall}
    
    # unstore any unit who was stuck under Konrad
    [if] {VARIABLE_CONDITIONAL stored_move_under_unit.length greater_than 0} {THEN([unstore_unit]
        variable=stored_move_under_unit
        find_vacant,check_passability=yes,no # ensure the unit reappears somewhere
    [/unstore_unit])} [/if]
    {CLEAR_VARIABLE stored_move_under_unit}
#enddef

#enemy macro that retreats all enemies to one spot, intended for cutscenes mainly
#WARNING: this uses [kill]. if you need retreat that keeps units alive (like with store_unit), use something other than this code
#define CUTSCENE_ENEMIES_RETREAT SIDE X Y
    [store_unit]
        [filter]
            side={SIDE}
            formula=(self.hitpoints>0)
        [/filter]
        variable=cutscene_retreating_enemies
    [/store_unit]

    [foreach]
        array=cutscene_retreating_enemies
        index_var=i
        [do]
        {MOVE_UNIT id=$this_item.id {X} {Y}}
        [kill]
            id=$this_item.id
            animate=no
            fire_event=no
        [/kill]
        [/do]
    [/foreach]

    {CLEAR_VARIABLE cutscene_retreating_enemies}
#enddef










